# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: schema.proto

require 'google/protobuf/empty_pb'
require 'google/protobuf/struct_pb'
require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("schema.proto", :syntax => :proto3) do
    add_message "immudb.schema.Key" do
      optional :key, :bytes, 1
    end
    add_message "immudb.schema.Permission" do
      optional :database, :string, 1
      optional :permission, :uint32, 2
    end
    add_message "immudb.schema.User" do
      optional :user, :bytes, 1
      repeated :permissions, :message, 3, "immudb.schema.Permission"
      optional :createdby, :string, 4
      optional :createdat, :string, 5
      optional :active, :bool, 6
    end
    add_message "immudb.schema.UserList" do
      repeated :users, :message, 1, "immudb.schema.User"
    end
    add_message "immudb.schema.CreateUserRequest" do
      optional :user, :bytes, 1
      optional :password, :bytes, 2
      optional :permission, :uint32, 3
      optional :database, :string, 4
    end
    add_message "immudb.schema.UserRequest" do
      optional :user, :bytes, 1
    end
    add_message "immudb.schema.ChangePasswordRequest" do
      optional :user, :bytes, 1
      optional :oldPassword, :bytes, 2
      optional :newPassword, :bytes, 3
    end
    add_message "immudb.schema.LoginRequest" do
      optional :user, :bytes, 1
      optional :password, :bytes, 2
    end
    add_message "immudb.schema.LoginResponse" do
      optional :token, :string, 1
      optional :warning, :bytes, 2
    end
    add_message "immudb.schema.AuthConfig" do
      optional :kind, :uint32, 1
    end
    add_message "immudb.schema.MTLSConfig" do
      optional :enabled, :bool, 1
    end
    add_message "immudb.schema.KeyValue" do
      optional :key, :bytes, 1
      optional :value, :bytes, 2
    end
    add_message "immudb.schema.Entry" do
      optional :tx, :uint64, 1
      optional :key, :bytes, 2
      optional :value, :bytes, 3
      optional :referencedBy, :message, 4, "immudb.schema.Reference"
    end
    add_message "immudb.schema.Reference" do
      optional :tx, :uint64, 1
      optional :key, :bytes, 2
      optional :atTx, :uint64, 3
    end
    add_message "immudb.schema.Op" do
      oneof :operation do
        optional :kv, :message, 1, "immudb.schema.KeyValue"
        optional :zAdd, :message, 2, "immudb.schema.ZAddRequest"
        optional :ref, :message, 3, "immudb.schema.ReferenceRequest"
      end
    end
    add_message "immudb.schema.ExecAllRequest" do
      repeated :Operations, :message, 1, "immudb.schema.Op"
      optional :noWait, :bool, 2
    end
    add_message "immudb.schema.Entries" do
      repeated :entries, :message, 1, "immudb.schema.Entry"
    end
    add_message "immudb.schema.ZEntry" do
      optional :set, :bytes, 1
      optional :key, :bytes, 2
      optional :entry, :message, 3, "immudb.schema.Entry"
      optional :score, :double, 4
      optional :atTx, :uint64, 5
    end
    add_message "immudb.schema.ZEntries" do
      repeated :entries, :message, 1, "immudb.schema.ZEntry"
    end
    add_message "immudb.schema.ScanRequest" do
      optional :seekKey, :bytes, 1
      optional :prefix, :bytes, 2
      optional :desc, :bool, 3
      optional :limit, :uint64, 4
      optional :sinceTx, :uint64, 5
      optional :noWait, :bool, 6
    end
    add_message "immudb.schema.KeyPrefix" do
      optional :prefix, :bytes, 1
    end
    add_message "immudb.schema.EntryCount" do
      optional :count, :uint64, 1
    end
    add_message "immudb.schema.Signature" do
      optional :publicKey, :bytes, 1
      optional :signature, :bytes, 2
    end
    add_message "immudb.schema.TxMetadata" do
      optional :id, :uint64, 1
      optional :prevAlh, :bytes, 2
      optional :ts, :int64, 3
      optional :nentries, :int32, 4
      optional :eH, :bytes, 5
      optional :blTxId, :uint64, 6
      optional :blRoot, :bytes, 7
    end
    add_message "immudb.schema.LinearProof" do
      optional :sourceTxId, :uint64, 1
      optional :TargetTxId, :uint64, 2
      repeated :terms, :bytes, 3
    end
    add_message "immudb.schema.DualProof" do
      optional :sourceTxMetadata, :message, 1, "immudb.schema.TxMetadata"
      optional :targetTxMetadata, :message, 2, "immudb.schema.TxMetadata"
      repeated :inclusionProof, :bytes, 3
      repeated :consistencyProof, :bytes, 4
      optional :targetBlTxAlh, :bytes, 5
      repeated :lastInclusionProof, :bytes, 6
      optional :linearProof, :message, 7, "immudb.schema.LinearProof"
    end
    add_message "immudb.schema.Tx" do
      optional :metadata, :message, 1, "immudb.schema.TxMetadata"
      repeated :entries, :message, 2, "immudb.schema.TxEntry"
    end
    add_message "immudb.schema.TxEntry" do
      optional :key, :bytes, 1
      optional :hValue, :bytes, 2
      optional :vOff, :int64, 3
      optional :vLen, :int32, 4
    end
    add_message "immudb.schema.VerifiableTx" do
      optional :tx, :message, 1, "immudb.schema.Tx"
      optional :dualProof, :message, 2, "immudb.schema.DualProof"
      optional :signature, :message, 3, "immudb.schema.Signature"
    end
    add_message "immudb.schema.VerifiableEntry" do
      optional :entry, :message, 1, "immudb.schema.Entry"
      optional :verifiableTx, :message, 2, "immudb.schema.VerifiableTx"
      optional :inclusionProof, :message, 3, "immudb.schema.InclusionProof"
    end
    add_message "immudb.schema.InclusionProof" do
      optional :leaf, :int32, 1
      optional :width, :int32, 2
      repeated :terms, :bytes, 3
    end
    add_message "immudb.schema.SetRequest" do
      repeated :KVs, :message, 1, "immudb.schema.KeyValue"
      optional :noWait, :bool, 2
    end
    add_message "immudb.schema.KeyRequest" do
      optional :key, :bytes, 1
      optional :atTx, :uint64, 2
      optional :sinceTx, :uint64, 3
    end
    add_message "immudb.schema.KeyListRequest" do
      repeated :keys, :bytes, 1
      optional :sinceTx, :uint64, 2
    end
    add_message "immudb.schema.VerifiableSetRequest" do
      optional :setRequest, :message, 1, "immudb.schema.SetRequest"
      optional :proveSinceTx, :uint64, 2
    end
    add_message "immudb.schema.VerifiableGetRequest" do
      optional :keyRequest, :message, 1, "immudb.schema.KeyRequest"
      optional :proveSinceTx, :uint64, 2
    end
    add_message "immudb.schema.HealthResponse" do
      optional :status, :bool, 1
      optional :version, :string, 2
    end
    add_message "immudb.schema.ImmutableState" do
      optional :db, :string, 1
      optional :txId, :uint64, 2
      optional :txHash, :bytes, 3
      optional :signature, :message, 4, "immudb.schema.Signature"
    end
    add_message "immudb.schema.ReferenceRequest" do
      optional :key, :bytes, 1
      optional :referencedKey, :bytes, 2
      optional :atTx, :uint64, 3
      optional :boundRef, :bool, 4
      optional :noWait, :bool, 5
    end
    add_message "immudb.schema.VerifiableReferenceRequest" do
      optional :referenceRequest, :message, 1, "immudb.schema.ReferenceRequest"
      optional :proveSinceTx, :uint64, 2
    end
    add_message "immudb.schema.ZAddRequest" do
      optional :set, :bytes, 1
      optional :score, :double, 2
      optional :key, :bytes, 3
      optional :atTx, :uint64, 4
      optional :boundRef, :bool, 5
      optional :noWait, :bool, 6
    end
    add_message "immudb.schema.Score" do
      optional :score, :double, 1
    end
    add_message "immudb.schema.ZScanRequest" do
      optional :set, :bytes, 1
      optional :seekKey, :bytes, 2
      optional :seekScore, :double, 3
      optional :seekAtTx, :uint64, 4
      optional :inclusiveSeek, :bool, 5
      optional :limit, :uint64, 6
      optional :desc, :bool, 7
      optional :minScore, :message, 8, "immudb.schema.Score"
      optional :maxScore, :message, 9, "immudb.schema.Score"
      optional :sinceTx, :uint64, 10
      optional :noWait, :bool, 11
    end
    add_message "immudb.schema.HistoryRequest" do
      optional :key, :bytes, 1
      optional :offset, :uint64, 2
      optional :limit, :int32, 3
      optional :desc, :bool, 4
      optional :sinceTx, :uint64, 5
    end
    add_message "immudb.schema.VerifiableZAddRequest" do
      optional :zAddRequest, :message, 1, "immudb.schema.ZAddRequest"
      optional :proveSinceTx, :uint64, 2
    end
    add_message "immudb.schema.TxRequest" do
      optional :tx, :uint64, 1
    end
    add_message "immudb.schema.VerifiableTxRequest" do
      optional :tx, :uint64, 1
      optional :proveSinceTx, :uint64, 2
    end
    add_message "immudb.schema.TxScanRequest" do
      optional :initialTx, :uint64, 1
      optional :limit, :uint32, 2
      optional :desc, :bool, 3
    end
    add_message "immudb.schema.TxList" do
      repeated :txs, :message, 1, "immudb.schema.Tx"
    end
    add_message "immudb.schema.Database" do
      optional :databaseName, :string, 1
    end
    add_message "immudb.schema.Table" do
      optional :tableName, :string, 1
    end
    add_message "immudb.schema.SQLGetRequest" do
      optional :table, :string, 1
      optional :pkValue, :message, 2, "immudb.schema.SQLValue"
      optional :atTx, :uint64, 3
      optional :sinceTx, :uint64, 4
    end
    add_message "immudb.schema.VerifiableSQLGetRequest" do
      optional :sqlGetRequest, :message, 1, "immudb.schema.SQLGetRequest"
      optional :proveSinceTx, :uint64, 2
    end
    add_message "immudb.schema.SQLEntry" do
      optional :tx, :uint64, 1
      optional :key, :bytes, 2
      optional :value, :bytes, 3
    end
    add_message "immudb.schema.VerifiableSQLEntry" do
      optional :sqlEntry, :message, 1, "immudb.schema.SQLEntry"
      optional :verifiableTx, :message, 2, "immudb.schema.VerifiableTx"
      optional :inclusionProof, :message, 3, "immudb.schema.InclusionProof"
      optional :DatabaseId, :uint64, 4
      optional :TableId, :uint64, 5
      optional :PKName, :string, 6
      map :ColIdsById, :uint64, :string, 8
      map :ColIdsByName, :string, :uint64, 9
      map :ColTypesById, :uint64, :string, 10
    end
    add_message "immudb.schema.UseDatabaseReply" do
      optional :token, :string, 1
    end
    add_message "immudb.schema.ChangePermissionRequest" do
      optional :action, :enum, 1, "immudb.schema.PermissionAction"
      optional :username, :string, 2
      optional :database, :string, 3
      optional :permission, :uint32, 4
    end
    add_message "immudb.schema.SetActiveUserRequest" do
      optional :active, :bool, 1
      optional :username, :string, 2
    end
    add_message "immudb.schema.DatabaseListResponse" do
      repeated :databases, :message, 1, "immudb.schema.Database"
    end
    add_message "immudb.schema.Chunk" do
      optional :content, :bytes, 1
    end
    add_message "immudb.schema.UseSnapshotRequest" do
      optional :sinceTx, :uint64, 1
      optional :asBeforeTx, :uint64, 2
    end
    add_message "immudb.schema.SQLExecRequest" do
      optional :sql, :string, 1
      repeated :params, :message, 2, "immudb.schema.NamedParam"
      optional :noWait, :bool, 3
    end
    add_message "immudb.schema.SQLQueryRequest" do
      optional :sql, :string, 1
      repeated :params, :message, 2, "immudb.schema.NamedParam"
      optional :reuseSnapshot, :bool, 3
    end
    add_message "immudb.schema.NamedParam" do
      optional :name, :string, 1
      optional :value, :message, 2, "immudb.schema.SQLValue"
    end
    add_message "immudb.schema.SQLExecResult" do
      repeated :ctxs, :message, 1, "immudb.schema.TxMetadata"
      repeated :dtxs, :message, 2, "immudb.schema.TxMetadata"
    end
    add_message "immudb.schema.SQLQueryResult" do
      repeated :columns, :message, 2, "immudb.schema.Column"
      repeated :rows, :message, 1, "immudb.schema.Row"
    end
    add_message "immudb.schema.Column" do
      optional :name, :string, 1
      optional :type, :string, 2
    end
    add_message "immudb.schema.Row" do
      repeated :columns, :string, 1
      repeated :values, :message, 2, "immudb.schema.SQLValue"
    end
    add_message "immudb.schema.SQLValue" do
      oneof :value do
        optional :null, :enum, 1, "google.protobuf.NullValue"
        optional :n, :uint64, 2
        optional :s, :string, 3
        optional :b, :bool, 4
        optional :bs, :bytes, 5
      end
    end
    add_enum "immudb.schema.PermissionAction" do
      value :GRANT, 0
      value :REVOKE, 1
    end
  end
end

module Immudb
  module Schema
    Key = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Key").msgclass
    Permission = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Permission").msgclass
    User = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.User").msgclass
    UserList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.UserList").msgclass
    CreateUserRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.CreateUserRequest").msgclass
    UserRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.UserRequest").msgclass
    ChangePasswordRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ChangePasswordRequest").msgclass
    LoginRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.LoginRequest").msgclass
    LoginResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.LoginResponse").msgclass
    AuthConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.AuthConfig").msgclass
    MTLSConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.MTLSConfig").msgclass
    KeyValue = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.KeyValue").msgclass
    Entry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Entry").msgclass
    Reference = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Reference").msgclass
    Op = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Op").msgclass
    ExecAllRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ExecAllRequest").msgclass
    Entries = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Entries").msgclass
    ZEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ZEntry").msgclass
    ZEntries = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ZEntries").msgclass
    ScanRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ScanRequest").msgclass
    KeyPrefix = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.KeyPrefix").msgclass
    EntryCount = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.EntryCount").msgclass
    Signature = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Signature").msgclass
    TxMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.TxMetadata").msgclass
    LinearProof = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.LinearProof").msgclass
    DualProof = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.DualProof").msgclass
    Tx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Tx").msgclass
    TxEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.TxEntry").msgclass
    VerifiableTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableTx").msgclass
    VerifiableEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableEntry").msgclass
    InclusionProof = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.InclusionProof").msgclass
    SetRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SetRequest").msgclass
    KeyRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.KeyRequest").msgclass
    KeyListRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.KeyListRequest").msgclass
    VerifiableSetRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableSetRequest").msgclass
    VerifiableGetRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableGetRequest").msgclass
    HealthResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.HealthResponse").msgclass
    ImmutableState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ImmutableState").msgclass
    ReferenceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ReferenceRequest").msgclass
    VerifiableReferenceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableReferenceRequest").msgclass
    ZAddRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ZAddRequest").msgclass
    Score = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Score").msgclass
    ZScanRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ZScanRequest").msgclass
    HistoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.HistoryRequest").msgclass
    VerifiableZAddRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableZAddRequest").msgclass
    TxRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.TxRequest").msgclass
    VerifiableTxRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableTxRequest").msgclass
    TxScanRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.TxScanRequest").msgclass
    TxList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.TxList").msgclass
    Database = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Database").msgclass
    Table = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Table").msgclass
    SQLGetRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLGetRequest").msgclass
    VerifiableSQLGetRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableSQLGetRequest").msgclass
    SQLEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLEntry").msgclass
    VerifiableSQLEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.VerifiableSQLEntry").msgclass
    UseDatabaseReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.UseDatabaseReply").msgclass
    ChangePermissionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.ChangePermissionRequest").msgclass
    SetActiveUserRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SetActiveUserRequest").msgclass
    DatabaseListResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.DatabaseListResponse").msgclass
    Chunk = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Chunk").msgclass
    UseSnapshotRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.UseSnapshotRequest").msgclass
    SQLExecRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLExecRequest").msgclass
    SQLQueryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLQueryRequest").msgclass
    NamedParam = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.NamedParam").msgclass
    SQLExecResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLExecResult").msgclass
    SQLQueryResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLQueryResult").msgclass
    Column = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Column").msgclass
    Row = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.Row").msgclass
    SQLValue = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.SQLValue").msgclass
    PermissionAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("immudb.schema.PermissionAction").enummodule
  end
end
